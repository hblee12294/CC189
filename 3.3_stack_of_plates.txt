
// Imagine a (literal) stack of plates. If the stack gets too high, it might topple.
// Therefore, in real life, we would likely start a new stack when the previous stack
// exceeds some threshold. Implement a data structure SetOfStacks that mimics this.
// SetOfStacks should be composd of several stacks and should create a new stack once
// the previous one exceeds capacity. SetOfStacks.push() and SetOfStacks.pop() should
// behave identically to a single stack (that is, pop() should return the same values
// as it would if there were just a single stack).
// FOLLOW UP
// Implement a function popAt(int index) which performs a pop operation on a specific
// sub-stack.

// --------------------------------- my implement in C++ ----------------------------

// There's a lot of methods to accomplish it by constructing a vector, list or 
// stack. It's easier to use a stack<stack<T>> to hold all of the stacks. But when
// it comes to the FOLLOW UP, it would be complex. So I suppose vector is a better 
// method. Certainly, it takes advantage of properties of vector.

// #1 Using a vector

class SetOfStacks {
private:
	vector<stack<T>> stacks; // the set of stacks
	int threshold;   // just an example, the theshold could be any value you want
	int current;   // mark the current stack
public:
	SetOfStacks() : stacks(stack<T> s), threshold(10), counter(0);
	void push(T item) {
		if (stacks[current].size() == threshold) {
			stack<T> s; 
			stacks.push_back(s);
			++counter;
		}
		stacks[current].push(item);
	}
	void pop() {
		if (stacks[current].empty()) {
			stacks.pop_back();
			--counter;
		}
		stacks[current].pop();
	}
	void popAt(int index) {
		if (index > counter - 1)
			throw xxx_error("Out of range!");
		else {
			stacks[index-1].pop();
		}

		if (stacks[index-1].empty())
			--current;
	}
}

// ---------------------------------- test case -------------------------------------

None

// ----------------------------- original solution in Java -------------------------

// Just like me, using an ArrayList in Java, it's similar with vector in C++

class SetOfStacks {
	ArrayList<Stack> stacks = new ArrayList<List>();
	public void push(int v) {
		Stack last = getLastStack();
		if (last != null && !last.isFull()) {
			last.push();
		} else {
			Stack stack = new Stack(capacity);
			stack.push(v);
			Stacks.add(stack);
		}
	}
	public in pop() {
		Stack last = getLastStack();
		if (last == null) throw new EmptyStackException();
		int v = last.pop();
		if (last.size == 0) stacks.remove(stacks.size() - 1);
		return v;
	}
}

// FOLLOW UP. It's more complicated than I thought, cause I suppose if I pop item
// at index position, the remaining items would keep still. But the problem indicates
// that the other remove every stack's bottom to the former one's top. So the stacks
// (except for the last one) will be full again. But I think mine is more efficient.

public class SetOfStacks {
	ArrayList<Stack> stacks = new ArrayList<Stack>();
	public int capacity;
	public SetOfStacks(int capacity) {
		this.capacity = capacity;
	}

	public Stack getLastStack() {
		if (stacks.size() == 0) return null;
		return stacks.get(stacks.size() - 1);
	}

	public void push(int v) { /* see learlier code */ }
	public int pop() { /* see learlier code */ }
	public booleana isEmpty() {
		Stack last = getLastStack();
		return last == null || last.isEmpty();
	}

	public int popAt(int index) {
		return leftShift(index, true);
	}

	public int leftShift(int index, boolean removeTop) {
		Stack stack = stacks.get(index);
		int removed_item;
		if (removeTop) removed_item = stack.pop();
		else removed_item = stack.removeBottom();
		if (stack.isEmpty()) {
			stacks.remove(index);
		} else if (stacks.size() > index + 1) {
			int v = leftShift(index + 1, false);
			stack.push(v);
		}
		return removed_item;
	}
}

// realize a stack structure

public class Stack {
	private int capacity;
	public Node top, bottom;
	public int size = 0;

	public Stack(int capacity) { this.capacity = capacity; }
	public boolean isFull() { return capacity == size; }

	public void join(Node above, Node below) {
		if (below != null) below.above = above;
		if (above != null) above.below = below;
	}

	public boolean push(int v) {
		if (size > capacity) return false;
		size++;
		Node n = new Node(v);
		if (size == 1) bottom = n;
		join(n, top);
		top = n;
		return true;
	}

	public int pop() {
		Node t = top;
		top = top.below;
		size--;
		return t.value;
	}

	public boolean isEmpty() {
		return size == 0;
	}

	public int removeBottom() {
		Node b = bottom;
		bottom = bottom above;
		if (bottom != null) bottom.below = null;
		size--;
		return b.value;
	}
}  