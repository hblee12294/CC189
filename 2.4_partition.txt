
// Write code to partition a linked list around a value x, such that all nodes less 
// x come before all nodes greater than or equal to x. If x is contained within the
// list, the values of x only need to be elements less than x(see below). The 
// partition element x can appear anywhere in the "right partition"; it does not need
// to appear between the left and right partitions.
// EXAMPLE
// Input:	3 -> 5 -> 8 -> 5 -> 10 -> 2 -> 1 [partition=5]
// Output:	3 -> 1 -> 2 -> 10 -> 5 -> 5 -> 8

// -------------------------- my implement in C++ ----------------------------------

// #1 Construct a new empty list, which store items small than x. When the iteration
// finish, merge new list and the original list.
// PS: I don't know if STL is allowd. It makes problem easy after all. 

list<int> listPartition(list<int> oriList, int x) {
	list<int> newList;

	// append items less than x on new list
	for (auto iter = oriList.begin(); iter != oriList.end(); ++iter) {
        if (*iter < x) {
            newList.push_back(*iter);
            oriList.erase(iter);
        }
	}

	// return original list, new list or spliced list
	if (newList.empty())
		return oriList;
	else if (oriList.empty())
		return newList;
	else {
        newList.splice(newList.end(), oriList);
		return newList;
	}
}


// ------------------------------------ test case -----------------------------------

list1 = {3, 5, 8, 5, 10, 2, 1}	x1 = 5; 
list2 = {0, 2, 5, 7, 3, 3, 2, 6} x2 = 10;
list3 = {1, 2, 5, 7, 3, 3, 2, 6} x3 = 0;

// ------------------------------ original solution in Java -------------------------

// #1 Create before list and after list, then merge them.
// It's a "stable" method.

/* Pass in the head of the linked list and the value to partition around */
LinkedListNode partition(LinkedListNode node, int x) {
	LinkedListNode beforeStart = null;
	LinkedListNode beforeEnd = null;
	LinkedListNode afterStart = null;
	LinkedListNode afterEnd = null;

	/* Partition list */
	while (node != null) {
		LinkedListNode next = node.next;
		node.next = null;
		if (node.data < x) {
			/* Insert node into end of before list */
			if (beforeStart == null) {
				beforeStart = node;
				beforeEnd = beforeStart;
			} else {
				beforeEnd.next = node;
				beforeEnd = node;
			}
		} else {
			/* Insert node into end of after list */
			if (afterStart == null) {
				afterStart = node;
				afterEnd = afterStart;
			} else {
				afterEnd.next = node;
				afterEnd = node;
			}
		}
		node = next;
	}

	if (beforeStart == null) {
		return afterStart;
	}

	/* Merge before list and after list */
	beforeEnd.next = afterStart;
	return beforeStart;
}

// #2 Start a "new" list. Elements bigger than the pivot element are put at the tail
// and elements smaller are put at the head. Since it's operated on node, we should 
// update either its head or tail.

LinkedListNode partition(LinkedListNode node, int x) {
	LinkedListNode head = node;
	LinkedListNode tail = node;

	while (node != null) {
		LinkedListNode next = node.next;
		if (node.data < x) {
			/* Insert node at head. */
			node.next = head;
			head = node;
		} else {
			/* Insert node at tail. */
			tail.next = node;
			tail = node;
		}
		node = next;
	}
	tail.next = null;

	return head;
}


