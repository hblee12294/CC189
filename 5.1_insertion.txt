
// You are given two 32-bit numbers, N and M, and two bit positions, i and j. Write a
// method to insert M into N such that M starts at bit j and ends at bit i. You can
// assume that the bits j through i have enough space to fit all of M. That is, if 
// M = 10011, you can assume that there are at least 5 bits between j and i. You 
// would not, for example, have j = 3 and i = 2, because M could not fully fit bewteen
// bit 3 and bit 2.
// EXAMPLE
// Input:	N = 10000000000, M = 10011, i = 2, j = 6
// Output:	N = 10001001100

// ---------------------------------- my implement in C++ ----------------------------

// I think the statment of this problem is ambiguous. It doesn't say that whether bits
// between i and j are all 0 or some 1. And why is it 'at least 5 bits ...'?
// I decide to shift M to left i logically at first, then add N and M. 
// For the convenience, I use bitset from STL as inputs and outputs.
// The result is right but I'm not sure that it's right.

bitset<32> insertBits(bitset<32> n, bitset<32> m, int i, int j) {
	m <<= i;
	n |= m;
	return n;
}

// After reading the original solution, I should clear all the bits between i and j.

bitset<32> insertBits(bitset<32> n, bitset<32> m, int i, int j) {
    bitset<32> maskMove;       // the maskMove has one '1', it shift 1 every time
    maskFix |= 1ul << i;
    bitset<32> mask;           // this is the real mask

    // by operate | between mask and maskMove, we can get all 1 from i to j in mask
    for (int ct = i; ct <= j; ++ct) {
        mask |= maskFix;
        maskFix <<= 1;
    }

    n &= ~mask;    // reverse the mask from i to j all 0, operate & to set them 0
    m <<= i;       // shift m to the i position
	return n |= m;  // add m to the n, from cleared area
}

// ------------------------------------- test case -----------------------------------

N = 10000000000, M = 10011, i = 2, j = 6
N = 10000000011, M = 111, i = 4, j = 6
N = 11111111111, M = 011110, i = 2, j = 7;

// ---------------------------------- original solution in Java ----------------------

// 1. Clear the bits j through i in N
// 2. Shift M so that it lines up with bits j through i
// 3. Merge M and N
// I think it does really well in clear process: construct mask left and right, then
// merge them. Easy to implement and understand. 

int updateBits(int n, int m, int i, int j) {
	/* Create a mask to clear bits i through j in n. Example: i = 2, j = 4. Result
	   should be 11100011. For simplicity, we'll use just 8 bits for the example.*/
	   int allOnes = ~0; // will queal sequence of all 1s

	// 1s before position j, then 0s. left = 11100000
	int left = allOnes << (j + 1);

	// 1's after posistion i.right = 00000011
	int right = ((1 << i) - 1);

	// All s1, except for 0s between i and j.mask = 11100011
	int mask = left | right;

	/* Clear bits j through i then put m in there */
	int n_cleared = n & mask;  // Clear bits j through i.
	int m_shifted = m << i;  // Move m into correct position.

	return n_cleared | m_shifted;  // Or them, and we're done!
}
