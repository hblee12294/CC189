
// You have two numbers represented by a linked list, where each node contains a 
// single digit. The digits are stored in reverse order, such that the 1's digit is
// at the head of the list. Write a function that adds the two numbers and returns
// the sum as a linked list.
// EXAMPLE
// Input:	(7 -> 1 -> 6) + (5 -> 9 -> 2). That is, 617 + 295.
// Output:	2 -> 1 -> 9. That is, 912.
// FOLLOW UP
// Suppose the digits are stored in forward order. Repeat the above problem.
// EXAMPLE
// Input:	(6 -> 1 -> 7) + (2 -> 9 -> 5). That is, 617 + 295.
// Output:	9 -> 1 -> 2. That is, 912.


// ------------------------------ my implement in C++ -------------------------------

// #1 Using functions to transfer lists to integers, or integers to lists, which are
// base on dividing or mutiplying 10. 

list<int> sumList(list<int> list1, list<int> list2) {
	if (list1.empty())        // if list is empty, the sum process can be omitted 
		return list2;
	else
		int num1 = listToInt(list1);

	if (list2.empty())        // if list is empty, the sum process can be omitted
		return list1;
	else 
		int num2 = listToInt(list2);

	int sum = num1 + num2;

	return intToList(sum);
}

int listToInt(list<int> l) {
	int num = 0;
	int multiple = 1;       // replace pow() function which gets 10^n

	for (auto node : l) {
		multiple *= 10;
		num += node * multiple;
	}

	return num;
}

list<int> intToList(int num) {
	list<int> l;

	while (num != 0) {
		l.push_back(num % 10); // append remainder to list
		num /= 10;
	}

	return l;
}


// FOLLOW UP. The main function are same, but the transfer methos changes.

list<int> sumList(list<int> list1, list<int> list2) {
	if (list1.empty())        // if list is empty, the sum process can be omitted 
		return list2;
	else
		int num1 = listToInt(list1);

	if (list2.empty())        // if list is empty, the sum process can be omitted
		return list1;
	else 
		int num2 = listToInt(list2);

	int sum = num1 + num2;

	return intToList(sum);
}

// Using num = num * 10 + n
int listToInt(list<int> l) {
	int num = 0;
	for (auto node : l) num = num * 10 + node;

	return num;
}

// Just replace push_back() with push_front
list<int> intToList(int num) {
	list<int> l;

	while (num != 0) {
		l.push_front(num % 10); // append remainder to list
		num /= 10;
	}

	return l;
}



// ----------------------------------- test case ------------------------------------

list1 = {7, 1, 6}	list2 = {5, 9, 2}   // 617 + 295 = 912; 716 + 592 = 1308
list3 = {0, 4, 4, 1} list4 = {2, 3}     // 1440 + 23 = 1472; 441 + 23 = 464

// ----------------------------- original solution in Java -------------------------

// #1 Add digit by digit in recursion. I think that's what interviewers want to see.

LinkedListNode addLists(LinkedListNode 11, LinkedListNode 12, int carry) {
	if (l1 == null && 12 == null & carry == 0) {
		return null;
	}

	LinkedListNode result = new LinkedListNode();
	int value = carry;
	if (l1 != null) {
		value += l1.data;
	}
	if (l2 != null) {
		value += l2.data
	}

	result.data = value % 10; /* Second digit of number */

	/* Resurse */
	if (l1 != null || 12 != null) {
		LinkedListNode more = addLists(l1 == null ? null : l1.next,
									   l2 == null ? null : l2.next,
									   value >= 10 ? 1 : 0);
		result.setNext(more);
	}
	return result;
}


// FOLLOW UP

class PartialSum {
	public LinkedListNode sum = null;
	public int carry = 0;
}

LinkedListNode addLists(LinkedListNode l1, LinkedListNode l2) {
	int len1 = lendth(l1);
	int len2 = length(l2);

	/* Pad the shorter list with zeros */
	if (len1 < len2) {
		l1 = padList(l1, len2 - len1);
	} else {
		l2 = padList(l2, len1 - len2);
	}

	/* Add lists */
	PartialSum sum = addListsHelper(l1, l2);

	/* If there was a carry value leftover, insert this at the front of the list.
	   Otherwise, just return the linked list. */
	if (sum.carry == 0) {
		return sum.sum;
	} else {
		LinkedListNode result = insertBefore(su.sum, sum.carry);
		return result;
	}
}

PartialSum addListsHelper(LinkedListNode l1, LinkedListNode l2) {
	if (l1 == null && l2 == null) {
		PartialSum sum = new PartialSum();
		return sum;
	}

	/* Add smaller digits recursively */
	PartialSum sum = addListsHelper(l1.next, l2.next);

	/* Add carry to current data */
	int val = sum.carry + l1.data + l2.data;

	/* Insert sum of current digits */
	LinkedListNode full_result = insertBefore(sum.sum, val % 10);

	/* Return sum so far, and the carry value */
	sum.sum = full_result;
	sum.carry = val /10;
	return sum;
}

/* Pad the list with zeros */
LinkedListNode padList(LinkedListNode l, int padding) {
	LinkedListNode head = l;
	for (int i = 0; i < padding; i++) {
		head = insertBefore(head, 0);
	}
	return head;
}

/* Helper function to insert node in the front of a linked list */
LinkedListNode insertBefore(LinkedListNode list, int data) {
	LinkedListNode node = new LinkedListNode(data);
	if (list != null) {
		node.next = list;
	}
	return node;
}

