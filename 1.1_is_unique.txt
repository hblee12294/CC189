
// Implement an algorithm to determine if a string has all unique characters. What if
// you cannot use additional data structures?

// -------------------------- my implement in C++ ------------------------------------

// #1
// The naive version, not in consideration of other characters or strings 
// in other language. The length of string is N, T:O(N) or O(1) S:O(1)

bool isUnique(string s) {
	vector<int> counter(26, 0);
	for (auto iter = s.begin(); iter != s.end(); ++iter)
		if (++counter[tolower(*iter) - 65] > 1) return false;     // wrong, the index should be: tolower(*iter) - 'a'
	return true;
}

// #2
// In considerration of other characters. T:O(N) or O(1) S:O(1)

bool isUnique(const string s) {
	vector<int> counter(128, 0);       // If it's a extended ASCII string, set 256 '0'
	for (auto iter = s.cbegin(); iter != s.cend(); ++iter)
		if (++counter[int(*iter)] != 1) return false;
	return true;
}

//---------------------- test case ---------------------

string1 = "12345abcde"
string2 = "abcdeABCDE"
string3 = "test case 1"
string4 = "1122aabbcc"

// ---------------------- official anwser in Java-------------------------

// #1
// T:O(N) S:O(1)

boolean isUniqueChars(String str) {
	if (str.length() > 128) return false;

	boolean[] char_set = new boolean[128];
	for (int i = 0; i < str.length(); i++) {
		int val = str.charAt(i);
		if (char_set[val]) return false;
		char_set[val] = true;
	}
	return true;
}

// #2
// Suppose the string only uses the lowercase letters a through z
// T:O(N) S:O(1)

boolean isUniqueChars(String str) {
	int checker = 0;          // bit vector
	for (int i = 0; i < str.length(); i++) {
		int val = str.charAt(i) - 'a';
		if ((checker & (1 << val)) > 0) return false;
		checker |= (1 << val);
	}
	return true;
}
