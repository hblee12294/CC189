
// Assume you have a method isSubstring which checks if one word is a substring of
// another. Given two strings, s1 and s2, write code to check if s2 is a rotation of 
// s1 using only one call to isSubstring(e.g, "waterbottle" is a rotation of
// "erbottlewat").

// ------------------------- my implement in C++ ----------------------------------

// #1 It's efficient and concise. Time complexity depends on substring match method.
// By the way, it's better to review and make out KMP algorithm.

bool isStrRotation(const string s1, const string s2) {
	if (s1.length() != s2.length()) return false;
	srting str = str1 + str1;

	return isSubstring(str,s2);
}

// ----------------------------------- test case -------------------------------------

str1 = "waterbottle" str2 = "erbottlewat"
str3 = "concentration" str4 = "centarioncon"

// ------------------------------- original solution in Java -------------------------

// #1 This is realy a clever method. 

boolean isRotation(String s1, String s2) {
	int len = s1.length();
	// Check that s1 and s2 are equal length and not empty
	if (len == s2.length() && len > 0) {
		String s1s1 = s1 + s1;
		return si Substring(s1s2, s2);
	}
	return false;
}

