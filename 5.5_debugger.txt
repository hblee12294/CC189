
// Explain what the following code soes: ((n & (n-1)) == 0).

// ------------------------------------ my implement in C++ ------------------------

// One of the bit rules: x & 0s = 0
// check if (n & n-1) is 0, means that if n or n-1 is 0.
// So this segment means if n = 0 or n = 1;

// My anwser is incorrect TAT
// n & n-1 == 0 means n and n-1 do not share a 1.
// We can try that:
// 1 - 1 = 0; 10 - 1 = 01; 100 - 1 = 011 : 1000 - 1 = 0111;
// we can find there's only one 1, which the number is a power of 2 or 0 (2的幂次方)
// And we can also tell that only power of 2 deduct 1 is its flip number.

// ----------------------------------- test case ------------------------------------

None

// ----------------------------- original solution in Java -------------------------

// What does it mean if A & B == 0?
// It means that A and B never have a 1 bit in the same place.
// What does n-1 look like (as compared with n)?
// n-1 will look like n, except that n's initial 0s will be 1s in n-1, and n's least
// significant 1 will be a 0 in n - 1. That is:
// if 	  n = abcde1000
// then	n-1 = abcde0111
// So what does n & (n-1) == 0 indicate ?
// ((n & (n-1)) == 0) checks if n is a powe of 2 (or if n is 0).
