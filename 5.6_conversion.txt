
// Write a function to determine the number of bits you would need to flip to convert
// integer A to integer B.
// EXAMPLE
// Input:	29 (or: 11101), 15 (or: 01111)
// Output:	2

// ----------------------------- my implement in C++ --------------------------------

// I think it's a pretty easy problem.
// #1 Compare bits of two bitsets at the same position, then increase the counter.

int converCount(unsigned long a, unsigned long b) {
	bitset<32> bitsA(a);
	bitset<32> bitsB(b);
	int counter = 0;

	for (int i = 0; i < bitsA.size(); ++i) {
		if (bitsA[i] != bitsB[i])               // if they are not same, increase counter
			++counter;
	}

	return counter;
}

// #2 Shift method, but it failed, which fell into infinite while loop. 
// There's sth wrong with the end condition.

int converCount(unsigned long a, unsigned long b) {
	bitset<32> bitsA(a);
	bitset<32> bitsB(b);
	int counter = 0;

	while (bitsA != 0 && bitsB != 0) {
		if (bitsA[0] != bitsB[0])
			++counter;
		bitsA >> 1;
		bitsB >> 1;
	}

	return counter;

// #3 Really smart algorithm, coppied from original solution

int bitSwapRequired(unsigned long a, unsigned long b) {
	int count = 0;
	for (unsigned long c = a ^ b; c != 0; c = c & (c-1)) {
		count++;
	}
	return count;
}

// -------------------------------- test case ----------------------------------------

A = 29	B = 15
A = 1   B = 15
A = 1	(B = 0) - 1

// ------------------------------- original solution in Java ------------------------

// #1 Brutal Force

int bitSwapRequired(int a, int b) {
	int count = 0;
	for (int c = a ^ b; c != 0; c = c >> 1) {  // different bits marked in c by XOR
		count += c & 1;                        // shift right and count 1 by (AND 1)
	} 
	return count;
}

// #2 A smarter and better method by flipping the least significant bit continuously.
// The operation c = c & (c - 1) will clear the least significant bit in c.

int bitSwapRequired(int a, int b) {
	int count = 0;
	for (int c = a ^ b; c != 0; c = c & (c-1)) {
		count++;
	}
	return count;
}
