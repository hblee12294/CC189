
// Write a method to replace all spaces in a string with '%20'. You may assume that the 
// string has sufficient space at the end to hold the additional characters, and that you
// are given the "true" length of the string. (Note: If implementing in Java, please use a
// character array so that you can perform this operation in place.)
// Example:
// Input:	"Mr John Smith    ", 13
// Output:	"Mr%20John%20Smith"

------------------------- my implement in C++ ----------------------------

// #1 Using extra T(N) space, to build a new string by scaning the original string and  
// fill the filler in sequence. Suppose the length of the original string is N, O(N) & T(N).

string urlify(const string oriStr, const size_t len) {
	string newStr;
	const string filler = "%20";

	for (auto iter = oriStr.begin(); iter - oriStr.begin() < len; ++iter) {
		if (*iter == ' ') {
			newStr += filler;
			continue;
		}
		newStr += *iter;
	}

	return newStr;
}

// #2, The original solution in C++, without using extra space, O(N), T(1)
// 我认为我的这个写法不是很美观

void urlify(string &str, const size_t len) {
	size_t index = 0;
	int spCounter = 0;
	const string filler = "%20";

	for (; index < len; ++index)
		if (str[index] == ' ') ++spCounter;

	index = len + spCounter * 2;
	int i = len - 1;

	while (i >= 0) {
		if (str[i] == ' ') {
			str = str.replace(index - 3, 3, filler);
			index -= 3;
		}
		else {
			str[index - 1] = str[i];
			--index;
		}
		--i;
	}
}

------------------------- test case ---------------------------------

string1 = "Mr John Smith     ", len1 = 13;
string2 = "I love you     ", len2 = 10;
string3 = "  You are who you are             ", len3 = 21;

------------------------ original solution in Java ---------------------

// The original version scan the string backward without using etra space
// and the time complex is 2N, still O(N)

void replaceSpace(char[] str, int trueLength) {
	int spaceCount = 0, index, i = 0;
	for (i = 0; i < trueLength; i++) {
		if (str[i] == ' ') {
			spaceCount++;
		}
	}
	index = trueLength + spaceCount * 2;
	if (trueLength < str.length) str[trueLength] = '\0';
	for (i = strueLength - 1; i > 0; i--) {
		if (str[i] == ' ') {
			str[index - 1] = '0';
			str[index - 2] = '2';
			str[index - 3] = '%';
			index = index - 3;
		} else {
			str[index - 1] = str[i];
			index--;
		}
	}
}