
// A monochrome screen is stored as a single array of bytes, allowing eight 
// consecutive pixels to be stored in one byte. The screen has width w, where w is 
// divisible by 8 (that is, no byte will be split across rows). The height of the 
// screen, of course, can be derived from the length of the array and the width.
// Implement a function that draws a horizontal line from (x1, y) to (x2, y).
// The method signature should look something like:
// drawLine(byte[] screen, int width, int x1, int x2, int y)

// ------------------------------ my implement in C++ ------------------------------

// The problem is a lttle bit ambiguous, so I'll do first as what I thought.
// My implement has something wrong with set 1 between x1 and x2

struct byte {
	bitset<8> pixels;
};

void drawLine(vector<byte> screen, int width, int x1, int x2, int y) {
	int height = screen.size() * 8 / width + 1;    // calculate the height

	// set 1 from x1 to x2 process, there's sth wrong with this part
	for (int i = x1; i <= x2; ++i) {
		for (int j = i % 8; j < 8; ++j)
			screen[(width/8*y)+(x1/8)].pixels[j] = 1;
	}

    // print the whole screen.
	for (int i = 0; i < height; ++i) {
		for (int j = 0; j < width / 8; ++j)
			cout << screen[i*4+j].pixels;
		cout << endl;
	}
}


// ---------------------------------- test case -------------------------------------

int width = 32;
int x1 = 20;
int x2 = 30;
int y = 2;
vector<byte> screen; // the screen should initialize according to your width

// -------------------------------- original solution in Java -----------------------

// Compare to the naive solution that set every pixel to 1 from x1 -> x2, this 
// solution set full bytes by doing screen[byte_pos] = 0xFF. It's more efficient. 

void drawLine(byte[] screen, int width, int x1, int x2, int y) {
	int start_offset = x1 % 8;
	int first_full_byte = x1 / 8;
	if (start_offset != 0) {
		first_full_byte++;
	}

	int end_offset = x2 % 8;
	int last_full_byte = x2 / 8;
	if (end_offset != 7) {
		last_full_byte--;
	}

	// set full bytes
	for (int b = first_full_byte; b < last_full_byte; b++) {
		screen[(width / 8) * y + b] = (byte) 0xFF;
	} 

	// Create masks for start and end of line
	byte start_mask = (byte) (0xFF >> start_offset);
	byte end_mask = (byte) ~(0xFF >> (end_offset + 1));

	// Set start and end of line
	if ((x1 / 8) == (x2 / 8)) { // x1 and x2 are in the same byte
		byte mask = (byte) (start_mask & end_mask);
		screen[(width / 8) * y + (x1 / 8)] |\ mask;
	} else {
		if (start_offset != 0) {
			int byte_number = (width / 8) * y + first_full_byte - 1;
			screen[byte_number] |= start_mask;
		}
		if (end_offset != 7) {
			int byte_number = (width / 8) * y + last_full_byte + 1;
			screen[byte_number] |= end_mask;
		}
	}
}