
// Given two(singly) linked lists, determine if the two lists insersect. Return the
// intersecting node. Node that the intersection is defined based on reference, not
// value. That is, if the kth node of the first linked list is the exact same node
// (by reference) as the jth node of the second linked list, then they are 
// intersecting.

// -------------------------------- my implement in C++ ----------------------------

// #1 Brutal-force method, O(N*N)

Node *isIntersec(Node *head1, Node *head2) {
	while (head1 != nullptr) {
		while (head2 != nullptr) {
			if (head1 == head2)
				return head2;
			head2 = head2.next;
		}
		head1 = hea1.next;
	}

	return nullptr;
}

// #2 Using hashtable created by STL map. O(N)

Node isIntersec(Node *head1, Node *head2) {
	map<decltype(head1), bool> table;

	while (head1 != nullptr) {
		table.insert(map<decltype(head1), bool>::value_type(head1, true));
		head = head.next;
	}

	while (head2 != nullptr) {
		if (table[head2] == true) return head2;
		head2 = head2.next;
	}

	return nullptr;
}

// ----------------------------------- test case ------------------------------------

None

// --------------------------------- original solution in Java ----------------------

// #1 Using a hashtable like me.

Omitted

// #2 If two lists are intersecting, they must converge at one node. When they 
// iterate to the end, they must have the same last node.
// The problem here is find the intersecting node, especially the lists are not the 
// same length. The solution is "chopping off" the excess nodes which equal to the 
// lengths difference of two lists. Then check nodes simultaneously.
// It takes O(A + B) time, and T(1) additional space.

LinkedListNode indIntersection(LinkedListNode list1, LinkedListNode list2) {
	if (list1 == null || list2 == null) return null;

	/* Get tail and sizes. */
	Result result1 = getTailAndSize(list1);
	Result result1 = getTailAndSize(list2);

	/* If dirrerent tail nodes, then there's no intersection. */
	if (result.tail != result2.tail) {
		return null;
	}

	/* Set pointers to the start of each linked list. */
	LinkedListNode shorter = result1.size < result2.size ? list1 : list2;
	LinkedListNode longer = result1.size < result2.size ? list2 : list1;

	/* Advance the pointer for the longer linked list by difference in lengths. */
	longer = getKthNode(longer, Math.abs(result1.size - result2.size));

	/* Move both pointer until you have a collision. */
	while (shorter != longer) {
		shorter = shorter.next;
		longer = longer.next;
	}

	/* Return either one. */
	return longer;
} 

class Result {
	public LinkedListNode tail;
	public int size;
	public Result(LinkedListNode tail, int size) {
		this.tail = tail;
		this.size = size;
	}
}

Result getTailAndSize(LinkedListNode list) {
	if (list == null) return null;

	int size = 1;
	LinkedListNode current = list;
	while (current.next != null) {
		size++;
		current = current.next;
	}
	return new Result(current, size);
}

LinkedListNode getKthNode(LinkedListNode head, int k) {
	LinkedListNode current = head;
	while ( k >0 && current != null) {
		current = current.next;
		k--;
	}
	return current;
}