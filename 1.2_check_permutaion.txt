
// Given two strings, write a method to decide if one is a permutation of the other

// ------------------------- my inplement in C++ ------------------------

// #1 Using permutation method from PIE, check if one of the str1 permutations is 
// equal to str2. It should be correct, and the printed permutations are also correct.
// However, there's something wrong with "if (tempStr == str2) return true; I don't   
// know if it's due to the compiler. The worst case is that the last permutation could 
// be matched with str2, so the time complexity is O(N!). 

bool checkPermutation(const string str1, const string str2) {
	static vector<bool> used(str1.length(), false);
	static string tempStr;

	if (str1.length() != str2.length()) return false;

	if (tempStr.length() == str1.length())
		if (tempStr == str2) return true;
	for (size_t i = 0; i < str1.length(); ++i) {
		if (used[i]) continue;
		tempStr.push_back(str1[i]);
		used[i] = true;
		checkPermutation(str1, str2);
		used[i] = false;
		tempStr.pop_back();
	}
	return false;
}

// #2 Using container 'map' from STL, just like 'dict' in Python. Creat a dict for 
// every string and compare every value through key. If there's a value can't be 
// matched, return false. The time complexity is O(N), the space complexity maybe 
// huge, beacause of using 2 'map'

bool checkPermutation(const string str1, const string str2) {
	map<char, int> dict1;
	map<char, int> dict2;

	if (str1.length() != str2.length()) return false;   // omissible

	for (size_t i = 0; i < str1.length(); ++i) {
		dict1[str1[i]] = 0;
		dict2[str2[i]] = 0;
	}

	if (dict1.size() != dict2.size()) return false;   // omissible

	for (size_t i = 0; i < str1.length(); ++i) {
		dict1[str1[i]] += 1;
		dict2[str2[i]] += 1;
	}

	for (size_t i = 0; i < str1.length(); ++i) {
		if (dict1[str1[i]] != dict2[str1[i]]) return false;
	}
	
	return true;	
}


// ------------------------- test case -----------------------------

str1 = "abcde" str2 = "edcba"
str1 = "abcde" str2 = "fghij"
str1 = "permutation" str2 = "muttionarep"
str1 = "apple" str2 = "pie"

// -------------------------- official anwser in Java -----------------------

// #1 Sort the strings
// O(N)

String sort(String s) {
	char [] content = s.toCharArray();
	java.util.Arrays.sort(content);         // 用了java的内置sort函数
	return new String(content);
}

boolean permutation(String s, String t) {
	if (s.length() != t.length()) {
		return false;
	}
	return sort(s).equals(sort(t));
}

// #2 Check if the two strings have identical character counts
// 和我的第二种方法一样，但是更巧妙。和我用map比较不一样，他先给第一个string建了个
// bit map，然后迭代第二个来递减map，更省时间和空间

boolean permutation(String s, String t) {
	if (s.length() != t.length()) {
		return false;
	}

	int letters = new int[128];

	char[] s_array = s.toCharArray();
	for (char c : s_array) {
		letters[c]++;
	}

	for (int i = 0; i < t.length(); i++) {
		int c = (int) t.charAt(i);
		letters[c]--;
		if (letters[c] < 0) {
			return false;
		}
	}

	return true;
}
